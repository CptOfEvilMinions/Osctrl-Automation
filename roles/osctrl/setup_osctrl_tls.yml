##########################################################################
# Install/Setup Osctrl-tls
##########################################################################
- name: stat /etc/osctrl/osctrl-tls directory
  ansible.builtin.stat:
    path: "/etc/osctrl/osctrl-tls"
  register: osctrl_tls_dir

- name: Create /etc/osctrl/osctrl-tls directory
  ansible.builtin.file:
    path: "/etc/osctrl/osctrl-tls"
    state: directory
    recurse: yes
    owner: root
    group: root

- name: Stat osctrl-tls binary
  ansible.builtin.stat:
    path: /usr/local/bin/osctrl-tls
  register: osctrl_tls_binary

- name: Download osctrl-tls binary
  get_url:
    url: https://github.com/jmpsec/osctrl/releases/download/v{{ osctrl_version }}/osctrl-tls-linux-amd64.bin
    dest: /usr/local/bin/osctrl-tls
    owner: root
    group: root
    mode: '0755'
  when: not osctrl_tls_binary.stat.exists

- name: Copy osctrl-tls service config
  template:
    src: "conf/ansible/osctrl/service.json"
    dest: "/etc/osctrl/osctrl-tls/service.json"
    owner: root
    group: osctrl
    mode: '0640'
  vars:
    service_name: "tls"
    listener: "{{ osctrl_tls_listener }}"
    port: "{{ osctrl_tls_port }}"
    host: "{{ osctrl_tls_host }}"
    auth: "{{ osctrl_tls_auth }}"
    logger: "{{ osctrl_tls_logger }}"

- name: Copy osctrl-tls systemd service config
  template:
    src: "conf/ansible/osctrl/osctrl.service"
    dest: "/etc/systemd/system/osctrl-tls.service"
    owner: root
    group: root
    mode: '0644'
  vars:
    component: "tls"
    config_file: "/etc/osctrl/osctrl-tls/service.json"
    redis_config: "/etc/osctrl/redis.json"
    db_config: "/etc/osctrl/db.json"

- name: Restart osctrl-tls service
  service:
    name: osctrl-tls
    enabled: yes
    state: restarted

##########################################################################
# Healthcheck
##########################################################################
- name: osctrl-tls healthcheck
  uri:
    url: "http://127.0.0.1:{{ osctrl_tls_port }}"
    follow_redirects: none
    method: GET
    remote_src: yes
    status_code: 200
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds